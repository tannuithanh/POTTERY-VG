// utils/export-helper.js
import * as XLSX from "xlsx";
import { message } from "ant-design-vue";

/* ===== Utils chung ===== */
function formatDateTime(input) {
  if (!input) return "";
  const date = new Date(input);
  if (isNaN(date)) return "";
  const dd = String(date.getDate()).padStart(2, "0");
  const mm = String(date.getMonth() + 1).padStart(2, "0");
  const yyyy = date.getFullYear();
  const hh = String(date.getHours()).padStart(2, "0");
  const ii = String(date.getMinutes()).padStart(2, "0");
  return `${dd}/${mm}/${yyyy} ${hh}:${ii}`;
}

function parseTime(str) {
  if (!str) return null;
  const date = new Date(str);
  if (isNaN(date)) return null;
  return date.getHours() * 60 + date.getMinutes();
}

function overlapMinutes(a1, a2, b1, b2) {
  const start = Math.max(a1, b1);
  const end = Math.min(a2, b2);
  return Math.max(0, end - start);
}

/* ===== Helper: t·ªïng ph√∫t kh√¥ng t√≠nh ngh·ªâ tr∆∞a 11:30‚Äì13:00 (690‚Äì780) ===== */
function durationExcludingLunch(startStr, endStr) {
  const s = parseTime(startStr);
  const e = parseTime(endStr);
  if (typeof s !== "number" || typeof e !== "number" || e <= s) return "";
  const total = e - s;
  const lunch = overlapMinutes(s, e, 690, 780); // [11:30, 13:00)
  return total - lunch;
}

/* ===== Quy t·∫Øc ƒë·∫øm cho Sheet 2 theo y√™u c·∫ßu m·ªõi =====
   - N·∫øu end > 13:00 (780) => 1 late + 1 early
   - Ng∆∞·ª£c l·∫°i: start ƒë√∫ng 07:30 (450) ho·∫∑c 13:00 (780) => 1 late
               c√≤n l·∫°i => 1 early
*/
function countLateEarlyForSummary(startStr, endStr) {
  const s = parseTime(startStr);
  const e = parseTime(endStr);
  if (typeof s !== "number" || typeof e !== "number")
    return { late: 0, early: 0 };

  // ‚úÖ Ch·ªâ khi b·∫Øc c·∫ßu qua tr∆∞a (tr∆∞·ªõc 13:00 -> sau 13:00) m·ªõi 1 tr·ªÖ + 1 s·ªõm
  if (s < 780 && e > 780) return { late: 1, early: 1 };

  // C√≤n l·∫°i: ph√¢n lo·∫°i theo gi·ªù b·∫Øt ƒë·∫ßu
  if (s === 450 || s === 780) return { late: 1, early: 0 }; // 07:30 ho·∫∑c 13:00 => tr·ªÖ
  return { late: 0, early: 1 }; // ngo√†i 2 m·ªëc ƒë√≥ => s·ªõm
}

function getStatusLabel(status) {
  return (
    {
      pending: "ƒêang ch·ªù",
      approved: "ƒê√£ duy·ªát",
      rejected: "T·ª´ ch·ªëi",
      in_progress: "ƒêang x·ª≠ l√Ω",
    }[status] || status
  );
}

function getPurposeLabel(purposeType) {
  if (purposeType === "personal") return "Vi·ªác c√° nh√¢n";
  if (purposeType === "company") return "Vi·ªác c√¥ng ty";
  return "";
}

/* ===== T√≠nh ƒëi tr·ªÖ / v·ªÅ s·ªõm (hi·ªÉn th·ªã ·ªü Sheet 1) =====
   - start == 07:30 ho·∫∑c 13:00 => late ‚úÖ
   - c√≤n l·∫°i => early ‚úÖ
*/
function computeLateEarly(startStr) {
  const m = parseTime(startStr);
  if (typeof m !== "number")
    return { lateText: "", earlyText: "", lateCount: 0, earlyCount: 0 };

  const isLate = m === 450 || m === 780;
  if (isLate) {
    return { lateText: "‚úÖ", earlyText: "", lateCount: 1, earlyCount: 0 };
  }
  return { lateText: "", earlyText: "‚úÖ", lateCount: 0, earlyCount: 1 };
}

/* ===== Vi·∫øt file Excel: t·ª± ƒë·ªông width c·ªôt, ƒëa sheet & ƒë∆°n sheet ===== */
function autoColWidths(rows) {
  const keys = Object.keys(rows[0] || {});
  return keys.map((key) => {
    let maxLength = key.length;
    rows.forEach((row) => {
      const val = row[key] ? String(row[key]) : "";
      if (val.length > maxLength) maxLength = val.length;
    });
    return { wch: maxLength + 2 };
  });
}

function writeExcel(rows, filename, sheetName = "Danh s√°ch") {
  if (!rows.length) {
    message.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
    return;
  }
  const ws = XLSX.utils.json_to_sheet(rows);
  ws["!cols"] = autoColWidths(rows);
  const wb = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(wb, ws, sheetName);
  XLSX.writeFile(wb, filename);
  message.success(`Xu·∫•t file ${filename} th√†nh c√¥ng!`);
}

function writeExcelMulti(sheets = [], filename = "export.xlsx") {
  const wb = XLSX.utils.book_new();
  sheets.forEach(({ name, rows }) => {
    if (!rows || !rows.length) return;
    const ws = XLSX.utils.json_to_sheet(rows);
    ws["!cols"] = autoColWidths(rows);
    XLSX.utils.book_append_sheet(wb, ws, name || "Sheet");
  });
  if (!wb.SheetNames.length) {
    return message.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
  }
  XLSX.writeFile(wb, filename);
  message.success(`Xu·∫•t file ${filename} th√†nh c√¥ng!`);
}

/* ===== 1) Gi·∫•y ra v√†o c·ªïng (GateEntry) =====
   - Sheet 1: chi ti·∫øt + c·ªôt "T·ªïng ph√∫t (kh√¥ng t√≠nh 11:30‚Äì13:00)" ngay sau "Th·ªùi gian k·∫øt th√∫c"
   - Sheet 2: ch·ªâ 'personal', ƒë·∫øm theo lu·∫≠t m·ªõi (end>13:00 => +2; else theo start)
*/
export function exportGateEntryToExcel(list = []) {
  const filtered = (list || []).filter(
    (item) => item?.form?.code === "GateEntry" && item.status === "approved"
  );
  if (!filtered.length) {
    return message.info(
      "Kh√¥ng c√≥ d·ªØ li·ªáu Gi·∫•y ra v√†o c·ªïng (ƒë√£ duy·ªát) ƒë·ªÉ xu·∫•t."
    );
  }

  // SHEET 1: Chi ti·∫øt
  const detailRows = filtered.map((item, index) => {
    const submitter = item.submitter_info?.name || "Kh√¥ng r√µ";
    const msnv = item.submitter_info?.msnv || "";
    const departments = item.submitter_info?.department?.name || "";
    const timeStart = item.data?.fromDate;
    const timeEnd = item.data?.toDate;

    const { lateText, earlyText, lateCount, earlyCount } =
      computeLateEarly(timeStart);
    const lyDo = getPurposeLabel(item.data?.purposeType);
    const ghiChu = item.data?.note ?? item.data?.reason ?? "";
    const totalMins = durationExcludingLunch(timeStart, timeEnd);

    return {
      STT: index + 1,
      "M√£ s·ªë nh√¢n vi√™n": msnv,
      "Ti√™u ƒë·ªÅ phi·∫øu": item.title || "",
      "Ng∆∞·ªùi ƒë·ªÅ ngh·ªã": submitter,
      "B·ªô ph·∫≠n": departments,
      "Ng√†y t·∫°o": formatDateTime(item.created_at),
      "Th·ªùi gian b·∫Øt ƒë·∫ßu": formatDateTime(timeStart),
      "Th·ªùi gian k·∫øt th√∫c": formatDateTime(timeEnd),
      "T·ªïng ph√∫t": totalMins,
      "Tr·∫°ng th√°i": getStatusLabel(item.status),
      "L√Ω do": lyDo,
      "Ghi ch√∫": ghiChu,
      "ƒêi tr·ªÖ": lateText,
      "S·ªë l·∫ßn ƒëi tr·ªÖ": lateCount || "",
      "V·ªÅ s·ªõm": earlyText,
      "S·ªë l·∫ßn v·ªÅ s·ªõm": earlyCount || "",
    };
  });

  // SHEET 2: T·ªïng h·ª£p (ch·ªâ purposeType = 'personal')
  const personalOnly = filtered.filter(
    (item) => item?.data?.purposeType === "personal"
  );

  const aggMap = new Map(); // key = msnv || (name|dept)
  personalOnly.forEach((item) => {
    const msnv = item.submitter_info?.msnv || "";
    const name = item.submitter_info?.name || "Kh√¥ng r√µ";
    const dept = item.submitter_info?.department?.name || "";
    const start = item.data?.fromDate;
    const end = item.data?.toDate;

    const { late, early } = countLateEarlyForSummary(start, end);

    const key = msnv || `${name}|${dept}`;
    if (!aggMap.has(key)) {
      aggMap.set(key, { msnv, name, dept, late: 0, early: 0 });
    }
    const row = aggMap.get(key);
    row.late += late;
    row.early += early;
  });

  const summaryRows = Array.from(aggMap.values()).map((r, idx) => ({
    STT: idx + 1,
    "M√£ s·ªë nh√¢n vi√™n": r.msnv,
    "H·ªç t√™n": r.name,
    "B·ªô ph·∫≠n": r.dept,
    "S·ªë l·∫ßn ƒëi tr·ªÖ": r.late,
    "S·ªë l·∫ßn v·ªÅ s·ªõm": r.early,
  }));

  writeExcelMulti(
    [
      { name: "Gi·∫•y ra v√†o c·ªïng", rows: detailRows },
      { name: "T·ªïng h·ª£p", rows: summaryRows },
    ],
    "GIAYRACONG.xlsx"
  );
}

/* ===== 2) Phi·∫øu ƒëi·ªÅu ƒë·ªông xe (VehicleDispatch) ‚Äì KH√îNG late/early =====
   (Gi·ªØ nguy√™n h√†nh vi hi·ªán t·∫°i, kh√¥ng ·∫£nh h∆∞·ªüng)
*/
export function exportVehicleDispatchToExcel(list = []) {
  const filtered = (list || []).filter(
    (item) =>
      item?.form?.code === "VehicleDispatch" && item.status === "approved"
  );
  if (!filtered.length) {
    return message.info(
      "Kh√¥ng c√≥ d·ªØ li·ªáu Phi·∫øu ƒëi·ªÅu ƒë·ªông xe (ƒë√£ duy·ªát) ƒë·ªÉ xu·∫•t."
    );
  }
  // üîé LOG d·ªØ li·ªáu g·ªëc tr∆∞·ªõc khi map
  console.log(filtered);

  const rows = filtered.map((item, index) => {
    const submitter = item.submitter_info?.name || "Kh√¥ng r√µ";
    const msnv = item.submitter_info?.msnv || "";
    const departments = item.submitter_info?.department?.name || "";

    const start = item.data?.start_time || item.data?.fromDate;
    const end = item.data?.end_time || item.data?.toDate;

    return {
      STT: index + 1,
      "M√£ s·ªë nh√¢n vi√™n": msnv,
      "Ti√™u ƒë·ªÅ phi·∫øu": item.title || "",
      "Ng∆∞·ªùi ƒë·ªÅ ngh·ªã": submitter,
      "B·ªô ph·∫≠n": departments,
      "Ng√†y t·∫°o": formatDateTime(item.created_at),
      "Xe √¥ t√¥": item.data?.vehicle || "",
      "T√†i x·∫ø": item.data?.driver || "",
      "Th·ªùi gian b·∫Øt ƒë·∫ßu": formatDateTime(item.data.start_time),
      "Th·ªùi gian k·∫øt th√∫c": formatDateTime(item.data.end_time),
      "L·ªô tr√¨nh t·ª´": item.data?.route_from || item.data?.routeFrom || "",
      "L·ªô tr√¨nh ƒë·∫øn": item.data?.route_to || item.data?.routeTo || "",
      "L√Ω do": item.data?.reason || "",
      "Tr·∫°ng th√°i": getStatusLabel(item.status),
    };
  });

  writeExcel(rows, "DIEUDONGXE.xlsx", "ƒêi·ªÅu ƒë·ªông xe");
}

/* ===== 3) Phi·∫øu mang v·∫≠t t∆∞ ra c·ªïng (MaterialGatepass) ‚Äì KH√îNG late/early =====
   (Gi·ªØ nguy√™n h√†nh vi hi·ªán t·∫°i, kh√¥ng ·∫£nh h∆∞·ªüng)
*/
export function exportMaterialGatepassToExcel(list = []) {
  const filtered = (list || []).filter(
    (item) =>
      item?.form?.code === "MaterialGatepass" && item.status === "approved"
  );
  if (!filtered.length) {
    return message.info(
      "Kh√¥ng c√≥ d·ªØ li·ªáu Phi·∫øu mang v·∫≠t t∆∞ ra c·ªïng (ƒë√£ duy·ªát) ƒë·ªÉ xu·∫•t."
    );
  }

  const rows = filtered.map((item, index) => {
    const submitter = item.submitter_info?.name || "Kh√¥ng r√µ";
    const msnv = item.submitter_info?.msnv || "";
    const departments = item.submitter_info?.department?.name || "";

    const materials = Array.isArray(item.data?.materials)
      ? item.data.materials
      : Array.isArray(item.data?.items)
      ? item.data.items
      : null;

    const materialsText = materials
      ? materials
          .map(
            (m, i) =>
              `${i + 1}. ${m.name || m.item_name || ""} (${
                m.qty || m.quantity || 0
              } ${m.unit || ""})`
          )
          .join("; ")
      : item.data?.item_name || "";

    return {
      STT: index + 1,
      "M√£ s·ªë nh√¢n vi√™n": msnv,
      "Ti√™u ƒë·ªÅ phi·∫øu": item.title || "",
      "Ng∆∞·ªùi ƒë·ªÅ ngh·ªã": submitter,
      "B·ªô ph·∫≠n": departments,
      "Ng√†y t·∫°o": formatDateTime(item.created_at),
      "V·∫≠t t∆∞ mang ra": materialsText,
      "M·ª•c ƒë√≠ch/ L√Ω do": item.data?.reason || item.data?.purpose || "",
      "Th·ªùi gian mang ra": item.data?.doc_date,
      "Tr·∫°ng th√°i": getStatusLabel(item.status),
    };
  });

  writeExcel(rows, "MANGVATTURACONG.xlsx", "Mang v·∫≠t t∆∞ ra c·ªïng");
}

/* ===== 4) Dispatcher theo formCode ===== */
export function exportByFormCode(list = [], formCode = "") {
  const code = formCode || "";
  if (code === "GateEntry") return exportGateEntryToExcel(list);
  if (code === "VehicleDispatch") return exportVehicleDispatchToExcel(list);
  if (code === "MaterialGatepass") return exportMaterialGatepassToExcel(list);
  message.info("Ch∆∞a ch·ªçn lo·∫°i bi·ªÉu m·∫´u ƒë·ªÉ xu·∫•t (ho·∫∑c lo·∫°i kh√¥ng h·ªó tr·ª£).");
}

/* ===== 5) Xu·∫•t t·∫•t c·∫£ ‚Äì t√°ch file theo t·ª´ng lo·∫°i (n·∫øu kh√¥ng ch·ªçn) ===== */
export function exportAllSeparated(list = []) {
  const any =
    (list || []).some(
      (x) => x?.form?.code === "GateEntry" && x.status === "approved"
    ) ||
    (list || []).some(
      (x) => x?.form?.code === "VehicleDispatch" && x.status === "approved"
    ) ||
    (list || []).some(
      (x) => x?.form?.code === "MaterialGatepass" && x.status === "approved"
    );

  if (!any) return message.info("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë√£ duy·ªát ƒë·ªÉ xu·∫•t.");
  exportGateEntryToExcel(list);
  exportVehicleDispatchToExcel(list);
  exportMaterialGatepassToExcel(list);
}

/* ===== 6) Gi·ªØ t∆∞∆°ng th√≠ch ‚Äì h√†m c≈© ===== */
export function exportFormInstanceToExcel(data) {
  // Alias cho GateEntry ƒë·ªÉ kh√¥ng g√£y code c≈©
  return exportGateEntryToExcel(data);
}

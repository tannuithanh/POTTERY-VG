import { defineStore } from "pinia";
import api from "@/plugins/axios-user";

export const useAuthStore = defineStore("auth", {
  state: () => ({
    token: localStorage.getItem("access_token") || null,
    user: null,
    modules: [],
  }),
  persist: {
    paths: ["token", "user", "modules"], // üÜï l∆∞u 3 tr∆∞·ªùng n√†y
  },

  actions: {
    // üü¢ ƒêƒÉng nh·∫≠p
    async login({ email, password }) {
      try {
        const res = await api.post(
          "/login",
          { email, password },
          { skipAuthInterceptor: true }
        );
        this.token = res.data.access_token;

        // üîê L∆∞u token
        localStorage.setItem("access_token", this.token);
        api.defaults.headers.common.Authorization = `Bearer ${this.token}`;

        // üë§ L·∫•y user
        const me = await api.get("/me");
        this.user = me.data;
        this.modules = me.data.modules || [];

        return { success: true };
      } catch (err) {
        // Kh√¥ng throw n·ªØa, tr·∫£ v·ªÅ l·ªói c·ª• th·ªÉ
        return {
          success: false,
          message: err?.response?.data?.message || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i",
        };
      }
    },

    // üîê T·∫£i l·∫°i th√¥ng tin user (n·∫øu ƒë√£ c√≥ token)
    async fetchMe() {
      if (!this.token) return;
      api.defaults.headers.common.Authorization = `Bearer ${this.token}`;

      try {
        const res = await api.get("/me");
        this.user = res.data;
      } catch (err) {
        this.logout(); // Token h·∫øt h·∫°n ho·∫∑c l·ªói -> auto logout
      }
    },

    // ƒê√∫ng c√∫ ph√°p method trong object
    async changePassword(payload) {
      return api.post("/change-password", payload);
    },

    // üî¥ ƒêƒÉng xu·∫•t
    async logout() {
      try {
        await api.post("/logout");
      } catch (_) {}

      this.token = null;
      this.user = null;
      localStorage.removeItem("access_token");
      delete api.defaults.headers.common.Authorization;
    },

    // Upload avatar
    async uploadAvatar(file) {
      const formData = new FormData();
      formData.append("avatar", file);

      try {
        const res = await api.post("/users/user/avatar", formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });

        // C·∫≠p nh·∫≠t v√†o store
        this.user.avatar = res.data.avatar_url;

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
        return { success: true, data: res.data };
      } catch (err) {
        if (err.response?.status === 422) {
          return {
            success: false,
            error:
              err.response.data.errors?.avatar?.[0] || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá",
          };
        }

        return {
          success: false,
          error: "Upload th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i sau.",
        };
      }
    },

    // Upload ch·ªØ k√Ω
    async uploadSignature(file) {
      const formData = new FormData();
      formData.append("signature", file);

      try {
        const res = await api.post("/users/user/signature", formData, {
          headers: { "Content-Type": "multipart/form-data" },
        });
        this.user.signature = res.data.signature_url;
        return { success: true };
      } catch (err) {
        const msg =
          err.response?.data?.errors?.signature?.[0] || "Upload th·∫•t b·∫°i";
        return { success: false, error: msg };
      }
    },
  },
});
